// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package usecase_test is a generated GoMock package.
package mocks

import (
	context "context"
	models "go-api/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookUsecase is a mock of BookUsecase interface
type MockBookUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBookUsecaseMockRecorder
}

// MockBookUsecaseMockRecorder is the mock recorder for MockBookUsecase
type MockBookUsecaseMockRecorder struct {
	mock *MockBookUsecase
}

// NewMockBookUsecase creates a new mock instance
func NewMockBookUsecase(ctrl *gomock.Controller) *MockBookUsecase {
	mock := &MockBookUsecase{ctrl: ctrl}
	mock.recorder = &MockBookUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookUsecase) EXPECT() *MockBookUsecaseMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockBookUsecase) Fetch(ctx context.Context, cursor string, num int) ([]*models.Book, string, error) {
	ret := m.ctrl.Call(m, "Fetch", ctx, cursor, num)
	ret0, _ := ret[0].([]*models.Book)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fetch indicates an expected call of Fetch
func (mr *MockBookUsecaseMockRecorder) Fetch(ctx, cursor, num interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockBookUsecase)(nil).Fetch), ctx, cursor, num)
}

// GetByID mocks base method
func (m *MockBookUsecase) GetByID(ctx context.Context, id int) (*models.Book, error) {
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockBookUsecaseMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBookUsecase)(nil).GetByID), ctx, id)
}

// GetByAuthor mocks base method
func (m *MockBookUsecase) GetByAuthor(ctx context.Context, author string) ([]*models.Book, error) {
	ret := m.ctrl.Call(m, "GetByAuthor", ctx, author)
	ret0, _ := ret[0].([]*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAuthor indicates an expected call of GetByAuthor
func (mr *MockBookUsecaseMockRecorder) GetByAuthor(ctx, author interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAuthor", reflect.TypeOf((*MockBookUsecase)(nil).GetByAuthor), ctx, author)
}

// GetByName mocks base method
func (m *MockBookUsecase) GetByName(ctx context.Context, name string) ([]*models.Book, error) {
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].([]*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockBookUsecaseMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockBookUsecase)(nil).GetByName), ctx, name)
}

// Store mocks base method
func (m *MockBookUsecase) Store(ctx context.Context, book *models.Book) (*models.Book, error) {
	ret := m.ctrl.Call(m, "Store", ctx, book)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockBookUsecaseMockRecorder) Store(ctx, book interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockBookUsecase)(nil).Store), ctx, book)
}

// Update mocks base method
func (m *MockBookUsecase) Update(ctx context.Context, book *models.Book) (*models.Book, error) {
	ret := m.ctrl.Call(m, "Update", ctx, book)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockBookUsecaseMockRecorder) Update(ctx, book interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookUsecase)(nil).Update), ctx, book)
}

// Delete mocks base method
func (m *MockBookUsecase) Delete(ctx context.Context, id int) (bool, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockBookUsecaseMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookUsecase)(nil).Delete), ctx, id)
}
