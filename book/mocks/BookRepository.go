// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "go-api/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookRepository is a mock of BookRepository interface
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockBookRepository) Fetch(ctx context.Context, cursor string, num int) ([]*models.Book, error) {
	ret := m.ctrl.Call(m, "Fetch", ctx, cursor, num)
	ret0, _ := ret[0].([]*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockBookRepositoryMockRecorder) Fetch(ctx, cursor, num interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockBookRepository)(nil).Fetch), ctx, cursor, num)
}

// GetByID mocks base method
func (m *MockBookRepository) GetByID(ctx context.Context, id int) (*models.Book, error) {
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockBookRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBookRepository)(nil).GetByID), ctx, id)
}

// GetByAuthor mocks base method
func (m *MockBookRepository) GetByAuthor(ctx context.Context, author string) ([]*models.Book, error) {
	ret := m.ctrl.Call(m, "GetByAuthor", ctx, author)
	ret0, _ := ret[0].([]*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAuthor indicates an expected call of GetByAuthor
func (mr *MockBookRepositoryMockRecorder) GetByAuthor(ctx, author interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAuthor", reflect.TypeOf((*MockBookRepository)(nil).GetByAuthor), ctx, author)
}

// GetByName mocks base method
func (m *MockBookRepository) GetByName(ctx context.Context, name string) ([]*models.Book, error) {
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].([]*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockBookRepositoryMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockBookRepository)(nil).GetByName), ctx, name)
}

// Store mocks base method
func (m *MockBookRepository) Store(ctx context.Context, b *models.Book) (*models.Book, error) {
	ret := m.ctrl.Call(m, "Store", ctx, b)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockBookRepositoryMockRecorder) Store(ctx, b interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockBookRepository)(nil).Store), ctx, b)
}

// Update mocks base method
func (m *MockBookRepository) Update(ctx context.Context, b *models.Book) (*models.Book, error) {
	ret := m.ctrl.Call(m, "Update", ctx, b)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockBookRepositoryMockRecorder) Update(ctx, b interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookRepository)(nil).Update), ctx, b)
}

// Delete mocks base method
func (m *MockBookRepository) Delete(ctx context.Context, id int) (bool, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockBookRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookRepository)(nil).Delete), ctx, id)
}
